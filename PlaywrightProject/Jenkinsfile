pipeline {
    agent any

    tools {
        maven 'Maven'
        jdk 'JAVA_HOME'
    }
    parameters {
        string(name: 'Branch_Name', defaultValue: 'main', description: 'Git Branch to be built')
    }

    environment {
       SONARQUBE_ENV = 'LocalSonar'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${params.Branch_Name}",
                    url: 'https://github.com/venkiralami/playwright_project_ven.git',
                    credentialsId: 'GitHubCredsId'
            }
        }

        stage('Build & Test') {
            steps {
                dir('PlaywrightProject') {
                    sh 'mvn clean install'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    dir('PlaywrightProject') {
                        sh '''
                            mvn jacoco:report sonar:sonar \
                            -Dsonar.projectKey=PlaywrightProject \
                            -Dsonar.host.url=http://localhost:9000 \
                            -Dsonar.token=sqa_e9f060a5bab7ae0dae124a41ee67171135152253 \
                            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                        '''
                    }
                }
            }
        }

        stage('Notify') {
            steps {
                echo 'Testing email notification...'
            }
        }
    }

    post {
        success {
            emailext(
                to: 'venki.ralami@gmail.com',
                subject: "✅ SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Build was successful! Check logs here: ${env.BUILD_URL}"
            )
        }
        failure {
            emailext(
                to: 'venki.ralami@gmail.com',
                subject: "❌ FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Build failed! Check logs here: ${env.BUILD_URL}"
            )
        }
    }
}
